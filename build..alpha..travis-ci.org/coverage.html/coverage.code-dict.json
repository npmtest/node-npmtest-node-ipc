{"/home/travis/build/npmtest/node-npmtest-node-ipc/test.js":"/* istanbul instrument in package npmtest_node_ipc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-ipc/lib.npmtest_node_ipc.js":"/* istanbul instrument in package npmtest_node_ipc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_ipc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_ipc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-ipc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-ipc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_ipc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_ipc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_ipc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_ipc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_ipc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_ipc.__dirname + '/lib.npmtest_node_ipc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-ipc/node_modules/node-ipc/node-ipc.js":"'use strict';\n\nconst IPC = require('./services/IPC.js');\n\nclass IPCModule extends IPC{\n    constructor(){\n        super();\n        //include IPC to make extensible\n        Object.defineProperty(\n            this,\n            'IPC',\n            {\n                enumerable:true,\n                writable:false,\n                value:IPC\n            }\n        )\n    }\n}\n\nmodule.exports=new IPCModule;\n","/home/travis/build/npmtest/node-npmtest-node-ipc/node_modules/node-ipc/services/IPC.js":"'use strict';\n\nconst Defaults = require('../entities/Defaults.js'),\n    Client = require('../dao/client.js'),\n    Server = require('../dao/socketServer.js'),\n    util = require('util');\n\nclass IPC{\n    constructor(){\n        Object.defineProperties(\n            this,\n            {\n                config      : {\n                    enumerable:true,\n                    writable:true,\n                    value:new Defaults\n                },\n                connectTo   : {\n                    enumerable:true,\n                    writable:false,\n                    value:connect\n                },\n                connectToNet: {\n                    enumerable:true,\n                    writable:false,\n                    value:connectNet\n                },\n                disconnect  : {\n                    enumerable:true,\n                    writable:false,\n                    value:disconnect\n                },\n                serve       : {\n                    enumerable:true,\n                    writable:false,\n                    value:serve\n                },\n                serveNet    : {\n                    enumerable:true,\n                    writable:false,\n                    value:serveNet\n                },\n                of          : {\n                    enumerable:true,\n                    writable:true,\n                    value:{}\n                },\n                server      : {\n                    enumerable:true,\n                    writable:true,\n                    configurable:true,\n                    value:false\n                },\n                log         : {\n                    enumerable:true,\n                    writable:false,\n                    value:log\n                }\n            }\n        );\n    }\n}\n\nfunction log(){\n    if(this.config.silent){\n        return;\n    }\n\n    const args=Array.prototype.slice.call(arguments);\n\n    for(let i=0, count=args.length; i<count; i++){\n        if(typeof args[i] != 'object'){\n            continue;\n        }\n\n        args[i]=util.inspect(\n            args[i],\n            {\n                depth:this.config.logDepth,\n                colors:this.config.logInColor\n            }\n        );\n    }\n\n    console.log(\n        args.join(' ')\n    );\n}\n\nfunction disconnect(id){\n    if(!this.of[id]){\n        return;\n    }\n\n    this.of[id].explicitlyDisconnected=true;\n\n    this.of[id].off('*','*');\n    if(this.of[id].socket){\n        if(this.of[id].socket.destroy){\n            this.of[id].socket.destroy();\n        }\n    }\n\n    delete this.of[id];\n}\n\nfunction serve(path,callback){\n    if(typeof path=='function'){\n        callback=path;\n        path=false;\n    }\n    if(!path){\n        this.log(\n            'Server path not specified, so defaulting to'.notice,\n            'ipc.config.socketRoot + ipc.config.appspace + ipc.config.id'.variable,\n            (this.config.socketRoot+this.config.appspace+this.config.id).data\n        );\n        path=this.config.socketRoot+this.config.appspace+this.config.id;\n    }\n\n    if(!callback){\n        callback=emptyCallback;\n    }\n\n    this.server=new Server(\n        path,\n        this.config,\n        log\n    );\n\n    this.server.on(\n        'start',\n        callback\n    );\n}\n\nfunction emptyCallback(){\n    //Do Nothing\n}\n\nfunction serveNet(host,port,UDPType,callback){\n    if(typeof host=='number'){\n        callback=UDPType;\n        UDPType=port;\n        port=host;\n        host=false;\n    }\n    if(typeof host=='function'){\n        callback=host;\n        UDPType=false;\n        host=false;\n        port=false;\n    }\n    if(!host){\n        this.log(\n            'Server host not specified, so defaulting to'.notice,\n            'ipc.config.networkHost'.variable,\n            this.config.networkHost.data\n        );\n        host=this.config.networkHost;\n    }\n    if(host.toLowerCase()=='udp4' || host.toLowerCase()=='udp6'){\n        callback=port;\n        UDPType=host.toLowerCase();\n        port=false;\n        host=this.config.networkHost;\n    }\n\n    if(typeof port=='string'){\n        callback=UDPType;\n        UDPType=port;\n        port=false;\n    }\n    if(typeof port=='function'){\n        callback=port;\n        UDPType=false;\n        port=false;\n    }\n    if(!port){\n        this.log(\n            'Server port not specified, so defaulting to'.notice,\n            'ipc.config.networkPort'.variable,\n            this.config.networkPort\n        );\n        port=this.config.networkPort;\n    }\n\n    if(typeof UDPType=='function'){\n        callback=UDPType;\n        UDPType=false;\n    }\n\n    if(!callback){\n        callback=emptyCallback;\n    }\n\n    this.server=new Server(\n        host,\n        this.config,\n        log,\n        port\n    );\n\n    if(UDPType){\n        this.server[UDPType]=true;\n        if(UDPType === \"udp4\" && host === \"::1\") {\n            // bind udp4 socket to an ipv4 address\n            this.server.path = \"127.0.0.1\";\n        }\n    }\n\n    this.server.on(\n        'start',\n        callback\n    );\n}\n\nfunction connect(id,path,callback){\n    if(typeof path == 'function'){\n        callback=path;\n        path=false;\n    }\n\n    if(!callback){\n        callback=emptyCallback;\n    }\n\n    if(!id){\n        this.log(\n            'Service id required'.warn,\n            'Requested service connection without specifying service id. Aborting connection attempt'.notice\n        );\n        return;\n    }\n\n    if(!path){\n        this.log(\n            'Service path not specified, so defaulting to'.notice,\n            'ipc.config.socketRoot + ipc.config.appspace + id'.variable,\n            (this.config.socketRoot+this.config.appspace+id).data\n        );\n        path=this.config.socketRoot+this.config.appspace+id;\n    }\n\n    if(this.of[id]){\n        if(!this.of[id].socket.destroyed){\n            this.log(\n                'Already Connected to'.notice,\n                id.variable,\n                '- So executing success without connection'.notice\n            );\n            callback();\n            return;\n        }\n        this.of[id].socket.destroy();\n    }\n\n    this.of[id] = new Client(this.config,this.log);\n    this.of[id].id = id;\n    this.of[id].path = path;\n\n    this.of[id].connect();\n\n    callback(this);\n}\n\nfunction connectNet(id,host,port,callback){\n    if(!id){\n        this.log(\n            'Service id required'.warn,\n            'Requested service connection without specifying service id. Aborting connection attempt'.notice\n        );\n        return;\n    }\n    if(typeof host=='number'){\n        callback=port;\n        port=host;\n        host=false;\n    }\n    if(typeof host=='function'){\n        callback=host;\n        host=false;\n        port=false;\n    }\n    if(!host){\n        this.log(\n            'Server host not specified, so defaulting to'.notice,\n            'ipc.config.networkHost'.variable,\n            this.config.networkHost.data\n        );\n        host=this.config.networkHost;\n    }\n\n    if(typeof port=='function'){\n        callback=port;\n        port=false;\n    }\n    if(!port){\n        this.log(\n            'Server port not specified, so defaulting to'.notice,\n            'ipc.config.networkPort'.variable,\n            this.config.networkPort\n        );\n        port=this.config.networkPort;\n    }\n\n    if(typeof callback == 'string'){\n        UDPType=callback;\n        callback=false;\n    }\n    if(!callback){\n        callback=emptyCallback;\n    }\n\n    if(this.of[id]){\n        if(!this.of[id].socket.destroyed){\n            this.log(\n                'Already Connected to'.notice,\n                id.variable,\n                '- So executing success without connection'.notice\n            );\n            callback();\n            return;\n        }\n        this.of[id].socket.destroy();\n    }\n\n    this.of[id] = new Client(this.config,this.log);\n    this.of[id].id = id;\n    this.of[id].path = host;\n    this.of[id].port = port;\n\n    this.of[id].connect();\n\n    callback(this);\n}\n\nmodule.exports=IPC;\n","/home/travis/build/npmtest/node-npmtest-node-ipc/node_modules/node-ipc/entities/Defaults.js":"'use strict';\n\n/*eslint no-magic-numbers: [\"error\", { \"ignore\": [ 0] }]*/\n\n/**\n * @module entities\n */\n\nconst os = require('os');\n\n/**\n * @class Defaults\n * @description Defaults Entity\n */\nclass Defaults{\n\n    /**\n     * @constructor\n     * @method constructor\n     * @return {void}\n     */\n    constructor(){\n\n        this.appspace='app.';\n        this.socketRoot='/tmp/';\n        this.id=os.hostname();\n\n        this.encoding='utf8';\n        this.rawBuffer=false;\n        this.sync=false;\n\n        this.delimiter='\\f';\n\n        this.silent=false;\n        this.logDepth=5;\n        this.logInColor=true;\n\n        this.maxConnections=100;\n        this.retry=500;\n        this.maxRetries=Infinity;\n        this.stopRetrying=false;\n\n        this.IPType=getIPType();\n        this.tls=false;\n        this.networkHost = (this.IPType == 'IPv6') ? '::1' : '127.0.0.1';\n        this.networkPort = 8000;\n\n        this.interface={\n            localAddress:false,\n            localPort:false,\n            family:false,\n            hints:false,\n            lookup:false\n        }\n    }\n}\n\n/**\n * method to get ip type\n *\n * @method getIPType\n * @return {string} ip type\n */\nfunction getIPType() {\n    const networkInterfaces = os.networkInterfaces();\n    let IPType = '';\n    if (networkInterfaces\n        && Array.isArray(networkInterfaces)\n        && networkInterfaces.length > 0) {\n        // getting the family of first network interface available\n        IPType = networkInterfaces [\n            Object.keys( networkInterfaces )[0]\n        ][0].family;\n    }\n    return IPType;\n}\n\nmodule.exports=Defaults;\n","/home/travis/build/npmtest/node-npmtest-node-ipc/node_modules/node-ipc/dao/client.js":"'use strict';\n\nconst net = require('net'),\n    tls = require('tls'),\n    EventParser = require('../entities/EventParser.js'),\n    Message = require('js-message'),\n    fs = require('fs'),\n    Queue = require('js-queue');\n\nlet Events = require('event-pubsub/es5');\nif(process.version[1]>4){\n    Events = require('event-pubsub');\n}\n\nlet eventParser = new EventParser();\n\nclass Client extends Events{\n    constructor(config,log){\n        super();\n        Object.assign(\n            this,\n            {\n                Client  : Client,\n                config  : config,\n                queue   : new Queue,\n                socket  : false,\n                connect : connect,\n                emit    : emit,\n                log     : log,\n                retriesRemaining:config.maxRetries||0,\n                explicitlyDisconnected: false\n            }\n        );\n\n        eventParser=new EventParser(this.config);\n    }\n}\n\nfunction emit(type,data){\n    this.log('dispatching event to ', this.id, this.path, ' : ', type, ',', data);\n\n    let message=new Message;\n    message.type=type;\n    message.data=data;\n\n    if(this.config.rawBuffer){\n        message=new Buffer(type,this.config.encoding);\n    }else{\n        message=eventParser.format(message);\n    }\n\n    if(!this.config.sync){\n        this.socket.write(message);\n        return;\n    }\n\n    this.queue.add(\n        syncEmit.bind(this,message)\n    );\n}\n\nfunction syncEmit(message){\n    this.log('dispatching event to ', this.id, this.path, ' : ', message);\n    this.socket.write(message);\n}\n\nfunction connect(){\n    //init client object for scope persistance especially inside of socket events.\n    let client=this;\n\n    client.log('requested connection to ', client.id, client.path);\n    if(!this.path){\n        client.log('\\n\\n######\\nerror: ', client.id ,' client has not specified socket path it wishes to connect to.');\n        return;\n    }\n\n    const options={};\n\n    if(!client.port){\n        client.log('Connecting client on Unix Socket :', client.path);\n\n        options.path=client.path;\n\n        if (process.platform ==='win32' && !client.path.startsWith('\\\\\\\\.\\\\pipe\\\\')){\n            options.path = options.path.replace(/^\\//, '');\n            options.path = options.path.replace(/\\//g, '-');\n            options.path= `\\\\\\\\.\\\\pipe\\\\${options.path}`;\n        }\n\n        client.socket = net.connect(options);\n    }else{\n        options.host=client.path;\n        options.port=client.port;\n\n        if(client.config.interface.localAddress){\n          options.localAddress=client.config.interface.localAddress;\n        }\n\n        if(client.config.interface.localPort){\n          options.localPort=client.config.interface.localPort;\n        }\n\n        if(client.config.interface.family){\n          options.family=client.config.interface.family;\n        }\n\n        if(client.config.interface.hints){\n          options.hints=client.config.interface.hints;\n        }\n\n        if(client.config.interface.lookup){\n          options.lookup=client.config.interface.lookup;\n        }\n\n        if(!client.config.tls){\n            client.log('Connecting client via TCP to', options);\n            client.socket = net.connect(options);\n        }else{\n            client.log('Connecting client via TLS to', client.path ,client.port,client.config.tls);\n            if(client.config.tls.private){\n                client.config.tls.key=fs.readFileSync(client.config.tls.private);\n            }\n            if(client.config.tls.public){\n                client.config.tls.cert=fs.readFileSync(client.config.tls.public);\n            }\n            if(client.config.tls.trustedConnections){\n                if(typeof client.config.tls.trustedConnections === 'string'){\n                    client.config.tls.trustedConnections=[client.config.tls.trustedConnections];\n                }\n                client.config.tls.ca=[];\n                for(let i=0; i<client.config.tls.trustedConnections.length; i++){\n                    client.config.tls.ca.push(\n                        fs.readFileSync(client.config.tls.trustedConnections[i])\n                    );\n                }\n            }\n\n            Object.assign(client.config.tls,options);\n\n            client.socket = tls.connect(\n                client.config.tls\n            );\n        }\n    }\n\n    client.socket.setEncoding(this.config.encoding);\n\n    client.socket.on(\n        'error',\n        function(err){\n            client.log('\\n\\n######\\nerror: ', err);\n            client.publish('error', err);\n\n        }\n    );\n\n    client.socket.on(\n        'connect',\n        function connectionMade(){\n            client.publish('connect');\n            client.retriesRemaining=client.config.maxRetries;\n            client.log('retrying reset');\n        }\n    );\n\n    client.socket.on(\n        'close',\n        function connectionClosed(){\n            client.log('connection closed' ,client.id , client.path,\n            client.retriesRemaining, 'tries remaining of', client.config.maxRetries\n        );\n\n            if(\n                client.config.stopRetrying ||\n                client.retriesRemaining<1 ||\n                client.explicitlyDisconnected\n\n            ){\n                client.publish('disconnect');\n                client.log(\n                    (client.config.id),\n                    'exceeded connection rety amount of',\n                    ' or stopRetrying flag set.'\n                );\n\n                client.socket.destroy();\n                client.publish('destroy');\n                client=undefined;\n\n                return;\n            }\n\n            setTimeout(\n                function retryTimeout(){\n                    client.retriesRemaining--;\n                    client.connect();\n                }.bind(null,client),\n                client.config.retry\n            );\n\n            client.publish('disconnect');\n        }\n    );\n\n    client.socket.on(\n        'data',\n        function(data) {\n            client.log('## received events ##');\n            if(client.config.rawBuffer){\n                client.publish(\n                   'data',\n                   new Buffer(data,client.config.encoding)\n                );\n                if(!client.config.sync){\n                    return;\n                }\n\n                client.queue.next();\n                return;\n            }\n\n            if(!this.ipcBuffer){\n                this.ipcBuffer='';\n            }\n\n            data=(this.ipcBuffer+=data);\n\n            if(data.slice(-1)!=eventParser.delimiter || data.indexOf(eventParser.delimiter) == -1){\n                client.log('Messages are large, You may want to consider smaller messages.');\n                return;\n            }\n\n            this.ipcBuffer='';\n\n            const events = eventParser.parse(data);\n            const eCount = events.length;\n            for(let i=0; i<eCount; i++){\n                let message=new Message;\n                message.load(events[i]);\n\n                client.log('detected event', message.type, message.data);\n                client.publish(\n                   message.type,\n                   message.data\n                );\n            }\n\n            if(!client.config.sync){\n                return;\n            }\n\n            client.queue.next();\n        }\n    );\n}\n\nmodule.exports=Client;\n","/home/travis/build/npmtest/node-npmtest-node-ipc/node_modules/node-ipc/entities/EventParser.js":"'use strict';\n\nconst Defaults = require('./Defaults.js');\n\nclass Parser{\n  constructor(config){\n    if(!config){\n      config=new Defaults;\n    }\n    this.delimiter=config.delimiter;\n  }\n\n  format(message){\n    if(!message.data && message.data!==false && message.data!==0){\n        message.data={};\n    }\n    if(message.data['_maxListeners']){\n        message.data={};\n    }\n\n    message=message.JSON+this.delimiter;\n    return message;\n  }\n\n  parse(data){\n    let events=data.split(this.delimiter);\n    events.pop();\n    return events;\n  }\n}\n\nmodule.exports=Parser;\n","/home/travis/build/npmtest/node-npmtest-node-ipc/node_modules/node-ipc/dao/socketServer.js":"'use strict';\n\nconst net = require('net'),\n    tls = require('tls'),\n    fs = require('fs'),\n    dgram = require('dgram'),\n    EventParser = require('../entities/EventParser.js'),\n    Message = require('js-message');\n\nlet Events = require('event-pubsub/es5');\nif(process.version[1]>4){\n    Events = require('event-pubsub');\n}\n\nlet eventParser = new EventParser();\n\nclass Server extends Events{\n    constructor(path,config,log,port){\n        super();\n        Object.assign(\n            this,\n            {\n                config          : config,\n                path            : path,\n                port            : port,\n                udp4            : false,\n                udp6            : false,\n                log             : log,\n                server          : false,\n                sockets         : [],\n                emit            : emit,\n                broadcast       : broadcast\n            }\n        );\n\n        eventParser=new EventParser(this.config);\n\n        this.on(\n            'close',\n            serverClosed.bind(this)\n        );\n    }\n\n    onStart(socket){\n        this.trigger(\n            'start',\n            socket\n        );\n    }\n\n    stop(){\n        this.server.close();\n    }\n\n    start(){\n        if(!this.path){\n            this.log('Socket Server Path not specified, refusing to start');\n            return;\n        }\n\n        fs.unlink(\n            this.path,\n            startServer.bind(this)\n        );\n    }\n}\n\nfunction emit(socket, type, data){\n    this.log('dispatching event to socket', ' : ', type, data);\n\n    let message=new Message;\n    message.type=type;\n    message.data=data;\n\n    if(this.config.rawBuffer){\n        this.log(this.config.encoding)\n        message=new Buffer(type,this.config.encoding);\n    }else{\n        message=eventParser.format(message);\n    }\n\n    if(this.udp4 || this.udp6){\n\n        if(!socket.address || !socket.port){\n            this.log('Attempting to emit to a single UDP socket without supplying socket address or port. Redispatching event as broadcast to all connected sockets');\n            this.broadcast(type,data);\n            return;\n        }\n\n        this.server.write(\n            message,\n            socket\n        );\n        return;\n    }\n\n    socket.write(message);\n}\n\nfunction broadcast(type,data){\n    this.log('broadcasting event to all known sockets listening to ', this.path,' : ', ((this.port)?this.port:''), type, data);\n    let message=new Message;\n    message.type=type;\n    message.data=data;\n\n    if(this.config.rawBuffer){\n        message=new Buffer(type,this.config.encoding);\n    }else{\n        message=eventParser.format(message);\n    }\n\n    if(this.udp4 || this.udp6){\n        for(let i=1, count=this.sockets.length; i<count; i++){\n            this.server.write(message,this.sockets[i]);\n        }\n    }else{\n        for(let i=0, count=this.sockets.length; i<count; i++){\n            this.sockets[i].write(message);\n        }\n    }\n}\n\nfunction serverClosed(){\n    for(let i=0, count=this.sockets.length; i<count; i++){\n        let socket=this.sockets[i];\n        let destroyedSocketId=false;\n\n        if(socket){\n            if(socket.readable){\n                continue;\n            }\n        }\n\n        if(socket.id){\n            destroyedSocketId=socket.id;\n        }\n\n        this.log('socket disconnected',destroyedSocketId.toString());\n\n        if(socket && socket.destroy){\n            socket.destroy();\n        }\n\n        this.sockets.splice(i,1);\n\n        this.publish('socket.disconnected', socket, destroyedSocketId);\n\n        return;\n    }\n}\n\nfunction gotData(socket,data,UDPSocket){\n    let sock=((this.udp4 || this.udp6)? UDPSocket : socket);\n    if(this.config.rawBuffer){\n        data=new Buffer(data,this.config.encoding);\n        this.publish(\n            'data',\n            data,\n            sock\n        );\n        return;\n    }\n\n    if(!this.ipcBuffer){\n        this.ipcBuffer='';\n    }\n\n    data=(this.ipcBuffer+=data);\n\n    if(data.slice(-1)!=eventParser.delimiter || data.indexOf(eventParser.delimiter) == -1){\n        this.log('Messages are large, You may want to consider smaller messages.');\n        return;\n    }\n\n    this.ipcBuffer='';\n\n    data=eventParser.parse(data);\n\n    while(data.length>0){\n        let message=new Message;\n        message.load(data.shift());\n\n        // Only set the sock id if it is specified.\n        if (message.data && message.data.id){\n            sock.id=message.data.id;\n        }\n\n        this.log('received event of : ',message.type,message.data);\n\n        this.publish(\n            message.type,\n            message.data,\n            sock\n        );\n    }\n}\n\nfunction socketClosed(socket){\n    this.publish(\n        'close',\n        socket\n    );\n}\n\nfunction serverCreated(socket) {\n    this.sockets.push(socket);\n\n    if(socket.setEncoding){\n        socket.setEncoding(this.config.encoding);\n    }\n\n    this.log('## socket connection to server detected ##');\n    socket.on(\n        'close',\n        socketClosed.bind(this)\n    );\n\n    socket.on(\n        'error',\n        function(err){\n            this.log('server socket error',err);\n\n            this.publish('error',err);\n        }.bind(this)\n    );\n\n    socket.on(\n        'data',\n        gotData.bind(this,socket)\n    );\n\n    socket.on(\n        'message',\n        function(msg,rinfo) {\n            if (!rinfo){\n                return;\n            }\n\n            this.log('Received UDP message from ', rinfo.address, rinfo.port);\n            let data;\n\n            if(this.config.rawSocket){\n                data=new Buffer(msg,this.config.encoding);\n            }else{\n                data=msg.toString();\n            }\n            socket.emit('data',data,rinfo);\n        }.bind(this)\n    );\n\n    this.publish(\n        'connect',\n        socket\n    );\n\n    if(this.config.rawBuffer){\n        return;\n    }\n}\n\nfunction startServer() {\n    this.log(\n        'starting server on ',this.path,\n        ((this.port)?`:${this.port}`:'')\n    );\n\n    if(!this.udp4 && !this.udp6){\n        this.log('starting TLS server',this.config.tls);\n        if(!this.config.tls){\n            this.server=net.createServer(\n                serverCreated.bind(this)\n            );\n        }else{\n            startTLSServer.bind(this)();\n        }\n    }else{\n        this.server=dgram.createSocket(\n            ((this.udp4)? 'udp4':'udp6')\n        );\n        this.server.write=UDPWrite.bind(this);\n        this.server.on(\n            'listening',\n            function UDPServerStarted() {\n                serverCreated.bind(this)(this.server);\n            }.bind(this)\n        );\n    }\n\n    this.server.on(\n        'error',\n        function(err){\n            this.log('server error',err);\n\n            this.publish(\n                'error',\n                err\n            );\n        }\n    );\n\n    this.server.maxConnections=this.config.maxConnections;\n\n    if(!this.port){\n        this.log('starting server as', 'Unix || Windows Socket');\n        if (process.platform ==='win32'){\n            this.path = this.path.replace(/^\\//, '');\n            this.path = this.path.replace(/\\//g, '-');\n            this.path= `\\\\\\\\.\\\\pipe\\\\${this.path}`;\n        }\n\n        this.server.listen(\n            this.path,\n            this.onStart.bind(this)\n        );\n\n        return;\n    }\n\n    if(!this.udp4 && !this.udp6){\n        this.log('starting server as', (this.config.tls?'TLS':'TCP'));\n        this.server.listen(\n            this.port,\n            this.path,\n            this.onStart.bind(this)\n        );\n        return;\n    }\n\n    this.log('starting server as',((this.udp4)? 'udp4':'udp6'));\n\n    this.server.bind(\n        this.port,\n        this.path\n    );\n\n    this.onStart(\n        {\n            address : this.path,\n            port    : this.port\n        }\n    );\n}\n\nfunction startTLSServer(){\n    this.log('starting TLS server',this.config.tls);\n    if(this.config.tls.private){\n        this.config.tls.key=fs.readFileSync(this.config.tls.private);\n    }else{\n        this.config.tls.key=fs.readFileSync(`${__dirname}/../local-node-ipc-certs/private/server.key`);\n    }\n    if(this.config.tls.public){\n        this.config.tls.cert=fs.readFileSync(this.config.tls.public);\n    }else{\n        this.config.tls.cert=fs.readFileSync(`${__dirname}/../local-node-ipc-certs/server.pub`);\n    }\n    if(this.config.tls.dhparam){\n        this.config.tls.dhparam=fs.readFileSync(this.config.tls.dhparam);\n    }\n    if(this.config.tls.trustedConnections){\n        if(typeof this.config.tls.trustedConnections === 'string'){\n            this.config.tls.trustedConnections=[this.config.tls.trustedConnections];\n        }\n        this.config.tls.ca=[];\n        for(let i=0; i<this.config.tls.trustedConnections.length; i++){\n            this.config.tls.ca.push(\n                fs.readFileSync(this.config.tls.trustedConnections[i])\n            );\n        }\n    }\n    this.server=tls.createServer(\n        this.config.tls,\n        serverCreated.bind(this)\n    );\n}\n\nfunction UDPWrite(message,socket){\n    let data=new Buffer(message, this.config.encoding);\n    this.server.send(\n        data,\n        0,\n        data.length,\n        socket.port,\n        socket.address,\n        function(err, bytes) {\n            if(err){\n                this.log('error writing data to socket',err);\n                this.publish(\n                    'error',\n                    function(err){\n                        this.publish('error',err);\n                    }\n                );\n            }\n        }\n    );\n}\n\nmodule.exports=Server;\n"}